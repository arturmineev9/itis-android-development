package com.example.hw6_room.screens

import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.appcompat.app.AlertDialog
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.GridLayoutManager
import com.bumptech.glide.Glide
import com.bumptech.glide.RequestManager
import com.example.hw6_room.MainActivity
import com.example.hw6_room.R
import com.example.hw6_room.databinding.FragmentMainScreenBinding
import com.example.hw6_room.db.entity.MemeEntity
import com.example.hw6_room.db.repository.MemeRepository
import com.example.hw6_room.di.ServiceLocator
import com.example.hw6_room.recyclerView.MemesAdapter
import com.example.hw6_room.recyclerView.MemesRepository
import com.example.hw6_room.utils.SessionManager
import kotlinx.coroutines.launch


class MainScreenFragment : Fragment() {

    private var viewBinding: FragmentMainScreenBinding? = null
    private var memesAdapter: MemesAdapter? = null
    private val memeRepository = ServiceLocator.getMemeRepository()
    private lateinit var sessionManager: SessionManager

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        viewBinding = FragmentMainScreenBinding.inflate(inflater, container, false)
        return viewBinding?.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        sessionManager = SessionManager(requireContext())
        (activity as MainActivity).setBottomNavigationVisibility(true)
        val glide = Glide.with(requireContext())
        initRecyclerView(glide)
        initFab()
    }

    private fun initRecyclerView(requestManager: RequestManager) {
        lifecycleScope.launch {
            val userId = sessionManager.getUserId()
            val memesList = memeRepository.getUserMemes(userId).toMutableList()
            memesAdapter = MemesAdapter(
                list = memesList,
                requestManager = requestManager,
                onItemClick = { memeId ->  // üëà –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è
                    openMemeDetails(memeId)
                },
                onItemLongClick = { meme, position ->
                    showDeleteConfirmationDialog(meme, position)
                },
                onFavoriteClick = { position, isFavorite ->
                    Log.d("position", position.toString())
                    toggleFavorite(memesList[position - 1], position)
                }
            )
            viewBinding?.run {
                mainRecycler.adapter = memesAdapter
                mainRecycler.layoutManager = GridLayoutManager(requireContext(), 2)
            }
        }
    }

    private fun deleteMeme(meme: MemeEntity, position: Int) {
        lifecycleScope.launch {
            memeRepository.deleteMeme(meme.id, sessionManager.getUserId())
            memesAdapter?.removeItem(position)  // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞
        }
    }

    private fun showDeleteConfirmationDialog(meme: MemeEntity, position: Int) {
        val dialog = AlertDialog.Builder(requireContext())
            .setTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
            .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–µ–º?")
            .setPositiveButton("–£–¥–∞–ª–∏—Ç—å") { _, _ ->
                deleteMeme(meme, position)  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–£–¥–∞–ª–∏—Ç—å", —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–û—Ç–º–µ–Ω–∞", –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            .create()

        dialog.show()
    }


    private fun toggleFavorite(meme: MemeEntity, position: Int) {
        lifecycleScope.launch {
            val updatedMeme = meme.copy(isFavorite = !meme.isFavorite) // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é
            memeRepository.toggleFavorite(updatedMeme.id, updatedMeme.isFavorite)
            memesAdapter?.updateItem(position, updatedMeme)
        }
    }

    private fun openMemeDetails(memeId: Int) {
        val bundle = Bundle().apply {
            putInt("memeId", memeId)
        }
        findNavController().navigate(R.id.action_memesListFragment_to_memeDetailsFragment, bundle)
    }


    private fun initFab() {
        viewBinding?.run {
            fab.setOnClickListener {
                findNavController().navigate(R.id.action_mainScreenFragment_to_addContentFragment)
            }
        }
    }


    override fun onDestroyView() {
        super.onDestroyView()
        viewBinding = null
    }



}